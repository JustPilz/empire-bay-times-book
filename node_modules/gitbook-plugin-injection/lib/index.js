/***********************************************************************
 *                                                                   _
 *       _____  _                           ____  _                 |_|
 *      |  _  |/ \   ____  ____ __ ___     / ___\/ \   __   _  ____  _
 *      | |_| || |  / __ \/ __ \\ '_  \ _ / /    | |___\ \ | |/ __ \| |
 *      |  _  || |__. ___/. ___/| | | ||_|\ \___ |  _  | |_| |. ___/| |
 *      |_/ \_|\___/\____|\____||_| |_|    \____/|_| |_|_____|\____||_|
 *
 *      ================================================================
 *                 More than a coder, More than a designer
 *      ================================================================
 *
 *
 *      - Document: index.js
 *      - Author: aleen42
 *      - Description: the main entrance for injection
 *      - Create Time: May 30th, 2016
 *      - Update Time: May 30th, 2016
 *
 *
 **********************************************************************/

 /**
  * [main module]
  * @type {Object}
  */
const injection = module.exports = {
    book: {
        assets: '.',
        js: [],
        html: {
            'head:end': '<script type="text/javascript" src="index.js"></script>'
        }
    },

    hooks: { },

    blocks: { },

    filters: { },

    /**
     * [test: tests function]
     * @param  {[type]} configs [simulated configs]
     * @return {[type]}         [description]
     */
    test: function (configs) {
        var config = configs || {js:[], css:[]};
        var updateElements = '';

        function getPathHierarchy() {
            var temp = '';
            return temp;
        }

        function resolvePath(fileName) {
            var temp = fileName.replace('../', '');
            return  getPathHierarchy() + temp;
        };

        /**
         * [if: javascript injection]
         */
        if (config.js && config.js.length > 0) {
            for (var i in config.js) {
                if (config.js.hasOwnProperty(i)) {
                    updateElements += '<script type="text/javascript" src="' + resolvePath(config.js[i]) + '"></script>';
                }
            }
        }

        /**
         * [if: css injection]
         */
        if (config.css && config.css.length > 0) {
            var temp;
            for (var i in config.css) {
                if (config.css.hasOwnProperty(i)) {
                    temp = config.css[i].replace('../', '');
                    updateElements += '<link rel="stylesheet" type="text/css" href="' + resolvePath(temp) +'">';
                }
            }
        }

        return updateElements;
    }
};
